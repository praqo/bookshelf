(function(exports){const events=function(){let events={};function on(eventName,fn){events[eventName]=events[eventName]||[];events[eventName].push(fn)}function off(eventName,fn){if(events[eventName]){for(let i=0;i<events[eventName].length;i++){if(events[eventName][i]===fn){events[eventName].splice(i,1);break}}}}function emit(eventName,data){if(events[eventName]){events[eventName].forEach(fn=>{fn(data)})}}return{on:on,off:off,emit:emit}}();const userDataFunctions=function(){let userData={bookIdArr:[],booksData:[]};if(!localStorage.hasOwnProperty("bookshelfApp")){updateLocalStorage()}else{userData=JSON.parse(localStorage.getItem("bookshelfApp"))}function updateLocalStorage(){localStorage.setItem("bookshelfApp",JSON.stringify(userData));events.emit("userDataChange",userData)}function addBook(bookInfo){userData={...userData,bookIdArr:[...userData.bookIdArr,bookInfo.id],booksData:[...userData.booksData,bookInfo]};updateLocalStorage()}function removeBook(bookId){userData={...userData,bookIdArr:userData.bookIdArr.filter(item=>item!==bookId),booksData:userData.booksData.filter(item=>item.id!==bookId)};updateLocalStorage()}events.on("addBook",addBook);events.on("removeBook",removeBook);return{userData:userData}}();const search=function(){if(document.querySelectorAll(".js-book-search")){const bookSearchForm=document.querySelectorAll(".js-book-search");const bookSearchInput=document.querySelector("#bookSearch");const apiUrl="https://openlibrary.org/search.json?q=";async function fetchData(url){events.emit("pageChange","search");try{const response=await fetch(url);const data=await response.json();events.emit("searchDataChange",data)}catch(error){console.error(error);alert("Error please try again later");events.emit("pageChange","home")}}function searchBooks(e){e.preventDefault();const searchInput=e.target.querySelector("input");if(!searchInput.value.replace(/ /g,"")){return}const searchValue=searchInput.value.replace(/ /g,"+");console.log("searching...");searchInput.value="";events.emit("searchData",apiUrl+searchValue)}bookSearchForm.forEach(item=>item.addEventListener("submit",searchBooks));events.on("searchData",fetchData)}}();const results=function(){if(document.querySelector(".js-results")){const body=document.querySelector("body");const resultsContainer=document.querySelector(".js-results");let userData=userDataFunctions.userData;function updateButton(buttonClicked,isAdding){if(isAdding){buttonClicked.innerText="Remove from bookshelf";buttonClicked.classList.remove("add-button");buttonClicked.classList.add("remove-button");buttonClicked.removeEventListener("click",emitAddBook);buttonClicked.addEventListener("click",emitRemoveBook)}else{buttonClicked.innerText="Add to bookshelf";buttonClicked.classList.remove("remove-button");buttonClicked.classList.add("add-button");buttonClicked.removeEventListener("click",emitRemoveBook);buttonClicked.addEventListener("click",emitAddBook)}}function emitRemoveBook(e){const buttonClicked=e.currentTarget;const parentEl=e.currentTarget.parentNode.parentNode.parentNode;console.log("removing");updateButton(buttonClicked,false);events.emit("removeBook",parentEl.dataset.bookid)}function emitAddBook(e){console.log("adding");const buttonClicked=e.currentTarget;const parentEl=e.currentTarget.parentNode.parentNode.parentNode;const bookInfo={id:parentEl.dataset.bookid,title:parentEl.dataset.booktitle,author:parentEl.dataset.bookauthor,cover:parentEl.dataset.bookcover};updateButton(buttonClicked,true);events.emit("addBook",bookInfo)}function populateData(data){let htmlToAppend="";data.docs.forEach(item=>{const itemInfo={id:item.key.slice(7),title:item.title,author:`${item.author_name?item.author_name[0]:""}`,cover:`${item.cover_edition_key?`https://covers.openlibrary.org/b/olid/${item.cover_edition_key}-L.jpg`:"https://openlibrary.org/images/icons/avatar_book-lg.png"}`};htmlToAppend+=createBookEl(itemInfo)});resultsContainer.innerHTML=htmlToAppend;document.querySelectorAll(".js-addRemovebook").forEach(item=>{if(item.classList.contains("add-button")){item.addEventListener("click",emitAddBook)}else{item.addEventListener("click",emitRemoveBook)}});events.emit("pageChange","results")}function createBookEl(item){return`<div
            class="grid-item"><a class="book-wrapper" data-bookid="${item.id}" data-booktitle="${item.title}" data-bookauthor="${item.author}" data-bookcover="${item.cover}">
        <div class="book-image-container">
          <div
            class="book-image"
            style="
              background-image: url(${item.cover});
            "
          ></div>
        </div>
        <div class="book-info">
          <h3 class="book-title">${item.title}<br />${item.author}</h3>
          <div class="book-subtitle">
          </div>
          <div class="book-details">${userData.bookIdArr.includes(item.id)?`<button class="js-addRemovebook remove-button">Remove from bookshelf</button>`:`<button class="js-addRemovebook add-button">Add to bookshelf</button>`}</div>
          <time class="book-id">${item.id}</time>
        </div>
      </a>
      </div>`}function updateUserData(data){userData=data}events.on("searchDataChange",populateData);events.on("userDataChange",updateUserData);return{createBookEl:createBookEl}}}();const bookshelf=function(){if(document.querySelector(".js-results")){const bookshelfLink=document.querySelector('[data-pageLink="bookshelf"]');const homeLinks=document.querySelectorAll('[data-pageLink="home"]');const bookshelfArea=document.querySelector(".js-bookshelfArea");let userData=userDataFunctions.userData;function emitRemoveBook(e){const buttonClicked=e.currentTarget;const parentEl=buttonClicked.parentNode.parentNode.parentNode.parentNode;bookshelfArea.removeChild(parentEl);events.emit("removeBook",buttonClicked.parentNode.parentNode.parentNode.dataset.bookid);if(userData.booksData.length<=0){emptyBookshelf()}}function emptyBookshelf(){bookshelfArea.innerHTML=`<div class="container text-center">
  <p>Your bookshelf is empty</p>
  <img
              class="hero-image"
              src="dist/images/bookshelf.png"
              alt="a bookshelf"
            />
</div>`}function populateData(data){let htmlToAppend="";if(data.length<=0){emptyBookshelf()}else{data.forEach(item=>{htmlToAppend+=results.createBookEl(item)});bookshelfArea.innerHTML=htmlToAppend;document.querySelectorAll(".js-addRemovebook").forEach(item=>{item.addEventListener("click",emitRemoveBook)})}console.log("populating books");events.emit("pageChange","bookshelf")}function updateUserData(data){userData=data}events.on("userDataChange",updateUserData);events.on("mybookshelf",populateData)}}();const routing=function(){const body=document.querySelector("body");function pageStateChange(page){const pagesArray=["home","search","results","bookshelf"];window.scrollTo(0,0);pagesArray.forEach(item=>{if(item!==page){body.classList.remove(item)}else{body.classList.add(item)}})}function parseURL(){const href=window.location.href.slice(window.location.href.indexOf("/#/"));const pageName=href.slice(3).slice(0,href.slice(3).indexOf("/"));const data={page:pageName,searchQuery:pageName==="search"?href.slice(href.indexOf("/search/")+8):null,bookID:pageName==="book"?href.slice(href.indexOf("/book/")+6):null};return data}function routePage(pageName){if(pageName==="home"){console.log("pushing homelink");events.emit("pageChange","home");return}const pageInfo=parseURL();if(pageInfo.page==="mybookshelf"||"mybookshel"){events.emit("mybookshelf",userDataFunctions.userData.booksData)}}window.addEventListener("DOMContentLoaded",function(){if(window.location.href.includes("/#/")){routePage()}console.log("DOMContentLoaded")});window.addEventListener("hashchange",function(){console.log("hashchange");if(window.location.origin+window.location.pathname===window.location.href||window.location.origin+"/#/"===window.location.href){console.log("going home");routePage("home");return}if(window.location.href.includes("/#/")){console.log("routing");routePage();return}});events.on("urlChange",routePage);events.on("pageChange",pageStateChange)}()})(typeof window=="undefined"?window={}:window);